---
title: "API Exercise"
description: ""
author: "Gigi Sung"
date: "3/1/2022"
draft: true
---

# Basic API

This excercise follows the instructuion provided by [Python Coding for Public Policy @ NYU Wagner](https://python-public-policy.afeld.me/en/nyu/lecture_5.html#in-class-exercise).

</br></br>

```{python}
import requests

# Setting parameters
jimmy = {
    "api_key": "DEMO_KEY",
    "q" : "Jimmy McMillan",
    "sort": "-first_file_date",
}

# Load data in json format
response = requests.get("https://api.open.fec.gov/v1/candidates/" , params = jimmy)
data=response.json()
data
```


```{python}
# Retrieve nested data
data['results'][0]['name']


```



### Nominatim API Geocoding Excercise

> The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queries.

> The search query may also contain [special phrases](https://wiki.openstreetmap.org/wiki/Nominatim/Special_Phrases) which are translated into specific OpenStreetMap (OSM) tags (e.g. Pub => `amenity=pub`). This can be used to narrow down the kind of objects to be returned.


```{python}
import requests

ithaca = {
    "q": "City Center, Ithaca",
    "format" : "json"
}

response= requests.get("https://nominatim.openstreetmap.org/search", 
params= ithaca,
headers={"user-agent": "Python in-class exercise"})

data_=response.json()
data_

```






## Reading into a DataFrame


```{python}
import pandas as pd

candidates_with_funds = {
    "api_key": "DEMO_KEY",
    "has_raised_funds": "true",
}
response = requests.get("https://api.open.fec.gov/v1/candidates/", params=candidates_with_funds)
data = response.json()

candidates = data["results"]
pd.DataFrame(candidates)


```



# Back to 311 data

>From [NYC Open Data Portal dataset page](https://data.cityofnewyork.us/Social-Services/311-Service-Requests-from-2010-to-Present/erm2-nwe9/data), click `Export` -> `SODA API` -> `API Docs`.



```{python}
# Example: 311 requests from the last week

from datetime import datetime, timedelta

now = datetime.utcnow()
now

```


```{python}
start = now - timedelta(weeks=1)
start
```




```{python}
start.isoformat()
```




```{python}
# data id
data_id = "erm2-nwe9"

# params
in_past_week = {
    "$where": f"created_date > '{start.isoformat()}'",
}

url = f"https://data.cityofnewyork.us/resource/{data_id}.json"


response = requests.get(url, params=in_past_week)


data=response.json()
data
```



```{python}
df=pd.DataFrame(data)
df

```

>Like the FEC, Socrata uses their own API to populate the tables when browsing data on sites powered by them.



